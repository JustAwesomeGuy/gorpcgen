// Code generated by gorpcgen; DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"

	"github.com/andrskom/gorpcgen/protocol/errors"
	"github.com/andrskom/gorpcgen/protocol/models"
	"github.com/nats-io/go-nats"
	serverHandlers "github.com/andrskom/gorpcgen/testservice/handlers"
)

type ncClientInterface interface {
	Request(subj string, data []byte, timeout time.Duration) (*nats.Msg, error)
}

// Client is auto generated client for service
type Client struct {
	nc             ncClientInterface
	requestTimeout time.Duration
}

// NewClient init client
func NewClient(nc ncClientInterface, ops ...func(c *Client)) *Client {
	c :=  &Client{nc: nc, requestTimeout: 100 * time.Millisecond}
	for _, op := range ops {
		op(c)
	}
	return c
}

// ClientTimeout set timeout for request
func ClientTimeout(timeout time.Duration) func (o *Client) {
	return func (c *Client) {
		c.requestTimeout = timeout
	}
}

type options struct {
	timeout time.Duration
}

// Timeout set timeout for request
func Timeout(timeout time.Duration) func (o *options) {
	return func (o *options) {
		o.timeout = timeout
	}
}

// Get is public service method
func (c *Client) Get(
	meta models.RequestMeta,
	requestData *serverHandlers.GetRequest,
	ops ...func (o *options),
) (*serverHandlers.GetResponse, *errors.Error) {
	o := &options {
		timeout: c.requestTimeout,
	}
	for _, op := range ops {
		op(o)
	}
	reqDataBody, err := json.Marshal(requestData)
	if err != nil {
		return nil, errors.New(errors.CodeInternal, "Can't marshal request data'", err)
	}
	req := models.Request{
		Meta: meta,
		Data: json.RawMessage(reqDataBody),
	}
	reqBody, err := json.Marshal(req)
	if err != nil {
		return nil, errors.New(errors.CodeInternal, "Can't marshal request'", err)
	}
	respBody, errModel := c.processRequest("Test.Get", reqBody, o.timeout)
	if errModel != nil {
		return nil, errModel
	}
	result := &serverHandlers.GetResponse{}
	if err := json.Unmarshal(respBody, &result); err != nil {
		return nil, errors.New(errors.CodeInternal, "Can't unmarshal response data", err)
	}
	return result, nil
}

func (c *Client) processRequest(topicName string, reqData []byte, timeout time.Duration) ([]byte, *errors.Error) {
	respMsg, err := c.nc.Request(topicName, reqData, timeout)
	if err != nil {
		return nil, errors.New(errors.CodeInternal, "Send nats request error", err)
	}
	if respMsg == nil {
		return nil, errors.New(errors.CodeInternal, "Received empty response msg")
	}

	resp := models.Response{}
	if err := json.Unmarshal(respMsg.Data, &resp); err != nil {
		return nil, errors.New(errors.CodeInternal, "Can't unmarshal response'", err)
	}
	switch resp.Type {
	case models.ResponseTypeErr:
		respErr := &errors.Error{}
		if err := json.Unmarshal([]byte(resp.Result), &respErr); err != nil {
			return nil, errors.New(errors.CodeInternal, "Can't unmarshal response error", err)
		}
		return nil, respErr
	case models.ResponseTypeOK:
		return []byte(resp.Result), nil
	default:
		return nil, errors.New(errors.CodeInternal, "Unknown type of response")
	}
}
